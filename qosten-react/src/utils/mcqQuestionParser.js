/**
 * Parser for MCQ questions with LaTeX formatting
 * Supports both English and Bengali (Bangla) formats:
 * 
 * English format:
 * ### *Question Set X*
 * *[Subject: ...]*
 * *[Chapter: ...]*
 * *[Lesson: ...]*
 * *[Board: ...]*
 * *X.* Question text with LaTeX
 * a) Option A
 * b) Option B
 * c) Option C
 * d) Option D
 * *Correct: x*
 * *Explanation:*
 * Explanation text with LaTeX
 * 
 * Bengali format:
 * *[‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º: ...]*
 * *[‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º: ...]*
 * *[‡¶™‡¶æ‡¶†: ...]*
 * *[‡¶¨‡ßã‡¶∞‡ßç‡¶°: ...]*
 * *X.* Question text
 * ‡¶ï) Option A
 * ‡¶ñ) Option B
 * ‡¶ó) Option C
 * ‡¶ò) Option D
 * *‡¶∏‡¶†‡¶ø‡¶ï:* ‡¶ó
 * *‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:*
 * Explanation text
 */

export function parseMCQQuestions(text) {
  if (!text || typeof text !== 'string') {
    console.log('‚ùå parseMCQQuestions: Invalid input - text is', typeof text);
    return [];
  }

  console.log('üîç parseMCQQuestions: Starting parse...');
  console.log('üìÑ Input length:', text.length, 'characters');
  console.log('üìÑ First 100 chars:', text.substring(0, 100));

  const questions = [];
  
  // Split by horizontal rule or ### to separate question sets
  const questionSets = text.split(/---+|###/).filter(s => s.trim());
  console.log('üì¶ Question sets after split:', questionSets.length);
  
  for (let setIdx = 0; setIdx < questionSets.length; setIdx++) {
    const set = questionSets[setIdx];
    console.log(`\nüìã Processing question set ${setIdx + 1}/${questionSets.length}`);
    const lines = set.split('\n').map(line => line.trim()).filter(line => line);
    console.log(`  üìù Lines in this set: ${lines.length}`);
    
    let currentQuestion = {
      type: 'mcq',
      subject: '',
      chapter: '',
      lesson: '',
      board: '',
      questionText: '',
      options: [],
      correctAnswer: '',
      explanation: '',
      language: 'en'
    };
    
    let inExplanation = false;
    let explanationBuffer = [];
    let questionBuffer = [];
    let inQuestion = false;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      // Skip "Question Set X" header
      if (line.match(/^\*+Question Set\s+\d+\*+/i)) {
        continue;
      }
      
      // Parse metadata fields (handle 0, 1 (*), or 2 (**) asterisks and Bengali field names)
      // Subject/‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º - If we encounter a new subject, save the current question first
      if (line.match(/^\*{0,2}\[(Subject|‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º):\s*(.+?)\]\*{0,2}$/i)) {
        console.log('  ‚úÖ Found Subject line:', line.substring(0, 80));
        // Save previous question if it exists and is valid
        if (currentQuestion.subject && currentQuestion.questionText && currentQuestion.options.length > 0) {
          console.log('    üíæ Saving previous question before starting new one');
          if (inExplanation && explanationBuffer.length > 0) {
            currentQuestion.explanation = explanationBuffer.join('\n').trim();
          }
          questions.push({ ...currentQuestion });
        }
        
        // Reset for new question
        currentQuestion = {
          type: 'mcq',
          subject: '',
          chapter: '',
          lesson: '',
          board: '',
          questionText: '',
          options: [],
          correctAnswer: '',
          explanation: '',
          language: 'en'
        };
        inExplanation = false;
        inQuestion = false;
        explanationBuffer = [];
        questionBuffer = [];
        
        const match = line.match(/^\*{0,2}\[(Subject|‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º):\s*(.+?)\]\*{0,2}$/i);
        currentQuestion.subject = match[2].trim();
      }
      // Chapter/‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º
      else if (line.match(/^\*{0,2}\[(Chapter|‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º):\s*(.+?)\]\*{0,2}$/i)) {
        const match = line.match(/^\*{0,2}\[(Chapter|‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º):\s*(.+?)\]\*{0,2}$/i);
        currentQuestion.chapter = match[2].trim();
        console.log('  ‚úÖ Found Chapter:', match[2].trim());
      }
      // Lesson/‡¶™‡¶æ‡¶†
      else if (line.match(/^\*{0,2}\[(Lesson|‡¶™‡¶æ‡¶†):\s*(.+?)\]\*{0,2}$/i)) {
        const match = line.match(/^\*{0,2}\[(Lesson|‡¶™‡¶æ‡¶†):\s*(.+?)\]\*{0,2}$/i);
        currentQuestion.lesson = match[2].trim();
      } 
      // Board/‡¶¨‡ßã‡¶∞‡ßç‡¶°
      else if (line.match(/^\*{0,2}\[(Board|‡¶¨‡ßã‡¶∞‡ßç‡¶°):\s*(.+?)\]\*{0,2}$/i)) {
        const match = line.match(/^\*{0,2}\[(Board|‡¶¨‡ßã‡¶∞‡ßç‡¶°):\s*(.+?)\]\*{0,2}$/i);
        currentQuestion.board = match[2].trim();
      }
      // Parse question number and text (e.g., **6.** or *6.* or 6. or **‡ß©.** Question text)
      // Supports both English (0-9) and Bengali (‡ß¶-‡ßØ) numerals
      else if (line.match(/^\*{0,2}[\d‡ß¶-‡ßØ]+\.\*{0,2}/)) {
        inQuestion = true;
        questionBuffer = [];
        // Remove the question number marker (handles 0, 1, or 2 asterisks and Bengali numerals)
        const questionText = line.replace(/^\*{0,2}[\d‡ß¶-‡ßØ]+\.\*{0,2}\s*/, '').trim();
        console.log('  ‚úÖ Found Question:', questionText.substring(0, 60) + '...');
        if (questionText) {
          questionBuffer.push(questionText);
        }
      }
      // Parse options (a), b), c), d) or Bengali ‡¶ï), ‡¶ñ), ‡¶ó), ‡¶ò))
      else if (line.match(/^[a-d‡¶ï-‡¶ò]\)/)) {
        console.log('  ‚úÖ Found Option:', line.substring(0, 50));
        // Save question text if we were collecting it
        if (inQuestion && questionBuffer.length > 0) {
          currentQuestion.questionText = questionBuffer.join(' ').trim();
          questionBuffer = [];
          inQuestion = false;
        }
        
        // Extract option (handle both English and Bengali)
        const optionMatch = line.match(/^([a-d‡¶ï-‡¶ò])\)\s*(.+)/);
        if (optionMatch) {
          let optionLabel = optionMatch[1];
          // Convert Bengali letters to English for consistency
          const bengaliToEnglish = { '‡¶ï': 'a', '‡¶ñ': 'b', '‡¶ó': 'c', '‡¶ò': 'd' };
          if (bengaliToEnglish[optionLabel]) {
            optionLabel = bengaliToEnglish[optionLabel];
          }
          currentQuestion.options.push({
            label: optionLabel,
            text: optionMatch[2].trim()
          });
        }
      }
      // Parse correct answer (handle 0, 1, or 2 asterisks and Bengali ‡¶∏‡¶†‡¶ø‡¶ï)
      else if (line.match(/^\*{0,2}(Correct|‡¶∏‡¶†‡¶ø‡¶ï):\*{0,2}\s*([a-d‡¶ï-‡¶ò])\s*\*{0,2}$/i)) {
        const match = line.match(/^\*{0,2}(Correct|‡¶∏‡¶†‡¶ø‡¶ï):\*{0,2}\s*([a-d‡¶ï-‡¶ò])\s*\*{0,2}$/i);
        let answer = match[2].toLowerCase();
        console.log('  ‚úÖ Found Correct answer:', answer);
        // Convert Bengali letters to English
        const bengaliToEnglish = { '‡¶ï': 'a', '‡¶ñ': 'b', '‡¶ó': 'c', '‡¶ò': 'd' };
        if (bengaliToEnglish[answer]) {
          answer = bengaliToEnglish[answer];
        }
        currentQuestion.correctAnswer = answer;
      }
      // Parse explanation (handle 0, 1, or 2 asterisks and Bengali ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ)
      else if (line.match(/^\*{0,2}(Explanation|‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ):\*{0,2}/i)) {
        console.log('  ‚úÖ Found Explanation line');
        inExplanation = true;
        explanationBuffer = [];
        // Check if explanation starts on same line
        const explanationText = line.replace(/^\*{0,2}(Explanation|‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ):\*{0,2}/i, '').trim();
        if (explanationText) {
          explanationBuffer.push(explanationText);
        }
      }
      // Collect explanation lines
      else if (inExplanation) {
        // Stop at next question set marker or metadata (handle both English and Bengali)
        if (line.match(/^\*{0,2}\[(Subject|‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º):/i) || line.match(/^\*{0,2}Question Set/i)) {
          // This is the start of next question, process current one
          if (explanationBuffer.length > 0) {
            currentQuestion.explanation = explanationBuffer.join('\n').trim();
          }
          
          // Save current question if valid
          if (currentQuestion.subject && currentQuestion.questionText && currentQuestion.options.length > 0) {
            questions.push({ ...currentQuestion });
          }
          
          // Reset for next question
          currentQuestion = {
            type: 'mcq',
            subject: '',
            chapter: '',
            lesson: '',
            board: '',
            questionText: '',
            options: [],
            correctAnswer: '',
            explanation: '',
            language: 'en'
          };
          inExplanation = false;
          explanationBuffer = [];
          
          // Process this line as metadata
          i--;
          continue;
        }
        explanationBuffer.push(line);
      }
      // Continue collecting question text if in question mode
      else if (inQuestion && !line.match(/^[a-d‡¶ï-‡¶ò]\)/)) {
        questionBuffer.push(line);
      }
    }
    
    // Save last question
    if (inExplanation && explanationBuffer.length > 0) {
      currentQuestion.explanation = explanationBuffer.join('\n').trim();
    }
    if (currentQuestion.subject && currentQuestion.questionText && currentQuestion.options.length > 0) {
      console.log('  üíæ Saving last question of set');
      questions.push(currentQuestion);
    } else {
      console.log('  ‚ö†Ô∏è Last question incomplete:', {
        hasSubject: !!currentQuestion.subject,
        hasQuestion: !!currentQuestion.questionText,
        optionCount: currentQuestion.options.length
      });
    }
  }
  
  console.log(`\n‚úÖ Total questions parsed: ${questions.length}`);
  return questions;
}

/**
 * Validate an MCQ question object
 */
export function validateMCQQuestion(question) {
  const errors = [];
  
  if (!question.subject) {
    errors.push('Subject is required');
  }
  
  if (!question.chapter) {
    errors.push('Chapter is required');
  }
  
  if (!question.questionText) {
    errors.push('Question text is required');
  }
  
  if (!question.options || question.options.length < 2) {
    errors.push('At least 2 options are required');
  }
  
  if (!question.correctAnswer) {
    errors.push('Correct answer is required');
  } else if (question.options && !question.options.some(opt => opt.label === question.correctAnswer)) {
    errors.push('Correct answer must match one of the option labels');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

/**
 * Format example text for the MCQ import interface
 */
export function getMCQQuestionExample() {
  return `### **Question Set 13**

**[Subject: Math]**  
**[Chapter: Algebraic Expressions]**  
**[Lesson: Algebraic Identities]**  
**[Board: D.B.-23]**  
**13.** If \\( x + y = \\sqrt{7} \\) and \\( x - y = \\sqrt{6} \\), then what is the value of \\( x^2 + y^2 \\)?  
a) \\( \\frac{1}{2} \\)  
b) \\( \\frac{13}{2} \\)  
c) \\( \\frac{15}{2} \\)  
d) \\( \\frac{17}{2} \\)  
**Correct: b**  
**Explanation:**  
\\[
x^2 + y^2 = \\frac{(x+y)^2 + (x-y)^2}{2} = \\frac{7 + 6}{2} = \\frac{13}{2}
\\]

---

### **Bengali Format Example**

*[‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º: ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶ì ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º]*  
*[‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º: ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶§‡¶æ]*  
*[‡¶™‡¶æ‡¶†: ‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§‡¶ø‡¶Ø‡ßÅ‡¶¶‡ßç‡¶ß‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø]*  
*[‡¶¨‡ßã‡¶∞‡ßç‡¶°: ‡¶°‡¶ø.‡¶¨‡¶ø.-‡ß®‡ß™]*  
*‡ß©.* "‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡¶≤‡¶æ‡¶á‡¶ü"-‡¶è‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ï‡ßá ‡¶õ‡¶ø‡¶≤‡ßá‡¶®?  
‡¶ï) ‡¶á‡¶Ø‡¶º‡¶æ‡¶π‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ñ‡¶æ‡¶®  
‡¶ñ) ‡¶Ü‡¶á‡¶Ø‡¶º‡ßÅ‡¶¨ ‡¶ñ‡¶æ‡¶®  
‡¶ó) ‡¶∞‡¶æ‡¶ì ‡¶´‡¶∞‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶≤‡ßÄ  
‡¶ò) ‡¶ú‡ßÅ‡¶≤‡¶´‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßÄ ‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡ßã  
*‡¶∏‡¶†‡¶ø‡¶ï:* ‡¶ó  
*‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:* ‡¶Æ‡ßá‡¶ú‡¶∞ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶≤ ‡¶∞‡¶æ‡¶ì ‡¶´‡¶∞‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶≤‡ßÄ ‡¶™‡¶æ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶® ‡¶∏‡ßá‡¶®‡¶æ‡¶¨‡¶æ‡¶π‡¶ø‡¶®‡ßÄ‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® ‡¶â‡¶ö‡ßç‡¶ö‡¶™‡¶¶‡¶∏‡ßç‡¶• ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡¶∞‡ßç‡¶§‡¶æ ‡¶õ‡¶ø‡¶≤‡ßá‡¶®‡•§`;
}
